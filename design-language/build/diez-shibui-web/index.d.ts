// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

export declare class RootComponent {}

export declare class Diez<T extends RootComponent> {
  constructor (baseClass: new () => T);
  readonly component: T;
  static applyHTMLExtensions(): void;
  attach(subscriber: (component: T) => void): void;
}

export declare class Color {
  /**
   * The raw color, suitable for usage in CSS and HTML.
   */
  color: string;
  /**
   * CSS declarations for the `color` CSS property.
   */
  colorStyle: {color: string};
  /**
   * CSS declarations for the `background-color` CSS property.
   */
  backgroundColorStyle: {backgroundColor: string};
  /**
   * CSS declarations for the `border-color` CSS property.
   */
  borderColorStyle: {borderColor: string};
  /**
   * CSS declarations for the `outline-color` CSS property.
   */
  outlineColorStyle: {outlineColor: string};
}

export declare class Colors {
  fuss10: Color;
  fuss20: Color;
  fuss30: Color;
  fuss40: Color;
  fuss50: Color;
  fuss60: Color;
  fuss70: Color;
  fuss80: Color;
  fuss90: Color;
  tiger10: Color;
  tiger20: Color;
  tiger30: Color;
  tiger40: Color;
  tiger50: Color;
  tiger60: Color;
  tiger70: Color;
  tiger80: Color;
  tiger90: Color;
  marigold10: Color;
  marigold20: Color;
  marigold30: Color;
  marigold40: Color;
  marigold50: Color;
  marigold60: Color;
  marigold70: Color;
  marigold80: Color;
  marigold90: Color;
  clover10: Color;
  clover20: Color;
  clover30: Color;
  clover40: Color;
  clover50: Color;
  clover60: Color;
  clover70: Color;
  clover80: Color;
  clover90: Color;
  cyan10: Color;
  cyan20: Color;
  cyan30: Color;
  cyan40: Color;
  cyan50: Color;
  cyan60: Color;
  cyan70: Color;
  cyan80: Color;
  cyan90: Color;
  amethyst10: Color;
  amethyst20: Color;
  amethyst30: Color;
  amethyst40: Color;
  amethyst50: Color;
  amethyst60: Color;
  amethyst70: Color;
  amethyst80: Color;
  amethyst90: Color;
  seattle10: Color;
  seattle20: Color;
  seattle30: Color;
  seattle40: Color;
  seattle50: Color;
  seattle60: Color;
  seattle70: Color;
  seattle80: Color;
  seattle90: Color;
  ivory: Color;
  midnight: Color;
  graphite: Color;
}

export declare class ColorsMapped {
  contentBackground: Color;
  text: Color;
}

export declare class Palette {
  colors: Colors;
  colorsMapped: ColorsMapped;
}

export declare class File {
  /**
   * The URL of the `File`
   */
  url: string;
}

export declare class Size2D {
  /**
   * The width of the size.
   */
  width: number;
  /**
   * The height of the size.
   */
  height: number;
  /**
   * CSS declarations for the `width` and `height` CSS properties.
   */
  style: {width: string, height: string};
  /**
   * CSS declarations for the `background-size` CSS property.
   */
  backgroundSizeStyle: {backgroundSize: string};
}

export declare class Image {
  /**
   * The URL of the `Image`
   */
  url: string;
  /**
   * CSS declarations for the `background-image` CSS property.
   */
  backgroundImageStyle: {backgroundImage: string};
}

export declare class Icons {
  logo: Image;
  masthead: Image;
}

export declare class Images {
  logo: Image;
  masthead: Image;
}

export declare class Lottie {
  /**
   * Mounts a `Lottie` animation on the given element.
   */
  mount(ref: any): void;
}

declare global {
  interface HTMLElement {
    /**
     * Mounts a Lottie animation on the element.
     *
     * You *must* have called `Diez.applyHTMLExtensions()` at least once to use this method.
     */
    mountLottie(lottieComponent: Lottie): void;
  }
}

export declare class En {
  title: string;
  tagline: string;
  caption: string;
}

export declare class Es {
  title: string;
  tagline: string;
  caption: string;
}

export declare class Copywriting {
  en: En;
  es: Es;
}

export declare class Spacing {
  xxs: number;
  xs: number;
  sm: number;
  md: number;
  lg: number;
  xl: number;
  xxl: number;
}

export declare class Sizing {
  xxs: number;
  xs: number;
  sm: number;
  md: number;
  lg: number;
  xl: number;
  xxl: number;
  xxxl: number;
}

export declare class Layout {
  spacing: Spacing;
  sizing: Sizing;
}

export declare class Point2D {
  x: number;
  y: number;
}

export declare class DropShadow {
  /**
   * The CSS box-shadow representation of the `DropShadow`.
   * @example
   * 0px 1px 16px rgba(0, 0, 16, .4)
   */
  boxShadow: string;
  /**
   * The CSS text-shadow representation of the `DropShadow`.
   * @example
   * 0px 1px 16px rgba(0, 0, 16, .4)
   */
  textShadow: string;
  /**
   * The CSS filter representation of the `DropShadow`.
   * @example
   * drop-shadow(0px 1px 16px rgba(0, 0, 16, .4))
   */
  filter: string;
  /**
   * CSS declarations for the `box-shadow` CSS property.
   */
  boxShadowStyle: {boxShadow: string};
  /**
   * CSS declarations for the `text-shadow` CSS property.
   */
  textShadowStyle: {textShadow: string};
  /**
   * CSS declarations for the `filter` CSS property.
   */
  filterStyle: {filter: string};
}

export declare class Shadows {
  button: DropShadow;
  card: DropShadow;
  cardOnDark: DropShadow;
  cardHovered: DropShadow;
  cardHoveredOnDark: DropShadow;
  modal: DropShadow;
  modalOnDark: DropShadow;
}

export declare class Font {
  file: File;
  name: string;
  fallbacks: string[];
  weight: number;
  style: string;
}

export declare class Typograph {
  /**
   * An `Object` with CSS values for this `Typograph`.
   */
  style: {
    color: string,
    fontSize: string,
    fontFamily: string,
    fontWeight: number,
    fontStyle: string,
    lineHeight?: string,
    letterSpacing: number,
    textAlign: "start" | "left" | "right" | "center",
    textDecoration: string,
  };
  /**
   * Applies the `Typograph` CSS styles to the given HTMLElement.
   */
  applyStyle(ref: HTMLElement): void;
}

declare global {
  interface HTMLElement {
    /**
     * Applies a Diez Typograph definition to the element.
     *
     * You *must* have called `Diez.applyHTMLExtensions()` at least once to use this method.
     */
    applyTypograph(typograph: Typograph): void;
  }
}

export declare class Typography {
  heading1: Typograph;
  body: Typograph;
  caption: Typograph;
}

export declare class DesignLanguage extends RootComponent {
  palette: Palette;
  icons: Icons;
  images: Images;
  loadingAnimation: Lottie;
  localization: Copywriting;
  layout: Layout;
  shadows: Shadows;
  typography: Typography;
}

