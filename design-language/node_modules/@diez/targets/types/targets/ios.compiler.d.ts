import { Compiler, CompilerTargetHandler, DiezType, PrimitiveType, Property, TargetDiezComponent, TargetProperty } from '@diez/compiler-core';
import { IosBinding, IosDependency, IosOutput } from './ios.api';
/**
 * A compiler for iOS targets.
 * @ignore
 */
export declare class IosCompiler extends Compiler<IosOutput, IosBinding> {
    /**
     * @abstract
     */
    protected validateOptions(): Promise<void>;
    /**
     * @abstract
     */
    hostname(): Promise<string>;
    /**
     * @abstract
     */
    readonly moduleName: string;
    /**
     * @abstract
     */
    readonly hotComponent: string;
    /**
     * Reducer for array component properties.
     *
     * Retypes `String` as `[String]` and consolidates initializers.
     *
     * @abstract
     */
    protected collectComponentProperties(parent: Property, allProperties: (TargetProperty | undefined)[]): {
        type: string;
        initializer: string;
        originalType?: string | PrimitiveType | undefined;
        name: string;
        isComponent: boolean;
        depth: number;
        parentType?: string | PrimitiveType | undefined;
        description: import("@diez/compiler-core").PropertyDescription;
        references: import("@diez/compiler-core").PropertyReference[];
    } | undefined;
    /**
     * Retrieves an initializer based on a spec.
     *
     * Via recursion, produces output like `ComponentType(fieldName: "fileValue", child: ChildType())`.
     *
     * @abstract
     */
    protected getInitializer(targetComponent: TargetDiezComponent): string;
    /**
     * @abstract
     */
    protected getPrimitiveName(type: DiezType): string | undefined;
    /**
     * @abstract
     */
    protected getPrimitiveInitializer(type: DiezType, instance: any): string | undefined;
    /**
     * Updates the output based on the contents of the binding.
     */
    private mergeBindingToOutput;
    /**
     * @abstract
     */
    protected createOutput(sdkRoot: string, projectName: string): {
        sdkRoot: string;
        projectName: string;
        processedComponents: Map<any, any>;
        sources: Set<never>;
        dependencies: Set<IosDependency>;
        assetBindings: Map<any, any>;
        bundleIdPrefix: string;
        sourcesRoot: string;
    };
    /**
     * @abstract
     */
    readonly staticRoot: string;
    /**
     * @abstract
     */
    printUsageInstructions(): void;
    /**
     * @abstract
     */
    clear(): void;
    /**
     * Retrieves a contextual blacklist based on options.
     */
    private readonly blacklist;
    /**
     * @abstract
     */
    writeSdk(): Promise<void>;
}
/**
 * Handles iOS target compilation.
 * @ignore
 */
export declare const iosHandler: CompilerTargetHandler;
//# sourceMappingURL=ios.compiler.d.ts.map