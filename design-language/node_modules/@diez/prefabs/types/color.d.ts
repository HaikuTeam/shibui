import { HashMap } from '@diez/engine';
/**
 * Provides simple hue-saturation-lightness-alpha color data.
 */
export interface ColorData {
    h: number;
    s: number;
    l: number;
    a: number;
}
declare const Color_base: new (overrides?: Partial<ColorData> | undefined) => import("@diez/engine").Prefab<ColorData> & ColorData;
/**
 * A component encapsulating color, including alpha transparency.
 *
 * You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and
 * [[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.
 * @noinheritdoc
 */
export declare class Color extends Color_base {
    defaults: {
        h: number;
        s: number;
        l: number;
        a: number;
    };
    /**
     * Creates an RGBA color.
     *
     * `red = Color.rgba(255, 0, 0, 1);`
     */
    static rgba(rIn: number, gIn: number, bIn: number, a: number): Color;
    /**
     * Creates an RGB color.
     *
     * `red = Color.rgb(255, 0, 0);`
     */
    static rgb(r: number, g: number, b: number): Color;
    /**
     * Creates an HSLA color.
     *
     * `red = Color.hsla(0, 1, 0.5, 1);`
     */
    static hsla(h: number, s: number, l: number, a: number): Color;
    /**
     * Creates an HSL color.
     *
     * `red = Color.hsl(0, 1, 0.5);`
     */
    static hsl(h: number, s: number, l: number): Color;
    /**
     * Creates a color from a hex code
     *
     * `red = Color.hex('#ff0');`
     *
     * 3, 4, 6, and 8 character hex specifications are supported. `#ff0`, `#ff0f`, `#ffff00`, and `#ffff00ff` should
     * all work.
     */
    static hex(hexCode: string): Color;
    /**
     * Ensures all values are normalized in [0, 1] before serialization.
     */
    sanitize(data: ColorData): {
        h: number;
        s: number;
        l: number;
        a: number;
    };
    /**
     * Lightens a color by the specified amount.
     *
     * `pink = this.red.lighten(0.5);`
     *
     * @returns A new Color instance after applying the specified lightener.
     */
    lighten(amount: number): Color;
    /**
     * Darkens a color by the specified amount.
     *
     * `maroon = this.red.darken(0.25);`
     *
     * @returns A new Color instance after applying the specified darkener.
     */
    darken(amount: number): Color;
    /**
     * Saturates a color by the specified amount.
     *
     * `bloodRed = this.mediumRed.saturate(0.25);`
     *
     * @returns A new Color instance after applying the specified saturater.
     */
    saturate(amount: number): Color;
    /**
     * Desaturates a color by the specified amount
     *
     * `grayRed = this.mediumRed.desaturate(0.25);`
     *
     * @returns A new Color instance after applying the specified desaturater.
     */
    desaturate(amount: number): Color;
    /**
     * Fades (reduces alpha transparency) by the specified amount.
     *
     * @returns A new Color instance after applying the specified fade.
     */
    fade(amount: number): Color;
}
/**
 * A `Palette` is a container for [[Color]]s.
 */
export declare type Palette = HashMap<Color>;
export {};
//# sourceMappingURL=color.d.ts.map