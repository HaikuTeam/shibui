"use strict";const e=require("@diez/cli-core"),o=require("child_process"),t=require("fs-extra"),r=require("path"),i=require("semver"),n={android:"https://diez.org/getting-started/kotlin.html",ios:"https://diez.org/getting-started/swift.html",web:"https://diez.org/getting-started/javascript.html"};module.exports=(async(s,a,c)=>{if(!["android","web","ios"].includes(a))return e.Log.error("Usage: diez start <android|ios|web>"),void process.exit(1);if(!await e.canRunCommand("yarn --version"))return e.Log.error("Yarn is required to run the example projects. See https://yarnpkg.org for details."),void process.exit(1);if("ios"===a){if(!await e.canRunCommand("pod --version"))return e.Log.error("CocoaPods is required to run the iOS example project. See installation options:"),e.Log.error("https://guides.cocoapods.org/using/getting-started.html#getting-started"),void process.exit(1);const t=o.execSync("pod --version").toString().trim();if(i.gt("1.7.0",t))return e.Log.error("CocoaPods 1.7.0 or greater is required to run the iOS example project. See upgrade options:"),e.Log.error("https://guides.cocoapods.org/using/getting-started.html#getting-started"),void process.exit(1)}const d=require.resolve("diez"),g=global.process.cwd(),m=c||r.resolve(g,"..","example-codebases",a);let p;e.Log.comment(`Building Diez project for target ${a}...`);const l=n[a];switch(a){case"android":o.execSync("yarn diez compile -t android",{stdio:"inherit"}),e.Log.comment("Starting the Diez hot server..."),p=o.fork(d,["hot","-t","android"],{stdio:"inherit"});break;case"ios":o.execSync("yarn diez compile -t ios --cocoapods",{stdio:"inherit"}),e.Log.comment("Installing CocoaPods dependencies in example codebase..."),o.execSync("pod install",{cwd:m,stdio:"inherit"}),e.Log.comment("Starting the Diez hot server..."),p=o.fork(d,["hot","-t","ios"],{stdio:"inherit"});break;case"web":o.execSync("yarn diez compile -t web",{stdio:"inherit"}),e.Log.comment("Installing Node dependencies in example codebase..."),o.execSync("yarn",{cwd:m,stdio:"inherit"}),e.Log.comment("Starting the Diez hot server..."),p=o.fork(d,["hot","-t","web"],{stdio:"inherit"})}const h=i=>{"built"===i&&(p.removeListener("message",h),(()=>{switch(e.Log.comment(`\nYour Diez project is now running in hot mode for ${a}.\n\nIn hot mode, Diez observes and emits changes to your design language in real time.\n\nTo learn more, follow along with the guide at:\n\n  ${e.Format.code(l)}\n`),a){case"android":return e.isMacOS()&&e.locateBinaryMacOS("com.google.android.studio")?o.execSync(`open -b com.google.android.studio ${m}`):e.Log.comment(`Open ${m} in Android Studio to run the example project.`);case"ios":try{const i=t.readdirSync(m).find(e=>e.endsWith(".xcworkspace"));if(!i)return;const n=r.join(m,i);return e.isMacOS()&&e.locateBinaryMacOS("com.apple.dt.Xcode")?o.execSync(`open ${n}`):e.Log.comment(`Open ${n} in Xcode to run the example project.`)}catch(e){return}case"web":o.spawn("yarn",["start"],{cwd:m,stdio:"inherit",shell:!0})}})())};p.on("message",h)});
//# sourceMappingURL=/@diez/start/lib/index.action.js.map