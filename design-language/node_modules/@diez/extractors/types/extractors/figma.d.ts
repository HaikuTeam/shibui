import { Extractor, ExtractorInput } from '@diez/extractors-core';
import { OAuthable } from '../api';
declare class FigmaExtractor implements Extractor, OAuthable {
    token: string;
    /**
     * [[ExtractorFactory]] interface method.
     *
     * To configure this extractor, we must provide a valid Figma access token as a constructor parameter.
     * @param token
     */
    static configure(constructorArgs: string[]): Promise<void>;
    /**
     * [[ExtractorFactory]] interface method.
     *
     * We expect to receive an [[UnauthorizedRequestException]] when the access token is missing or invalid.
     * Thus, these errors should be retriable after we delete the Figma access token.
     */
    static shouldRetryError(error: Error): Promise<boolean>;
    /**
     * [[ExtractorFactory]] interface method. Instantiates a Figma extractor with a provided token.
     * @param token
     */
    static create(token?: string): FigmaExtractor;
    /**
     * Returns a boolean indicating if the source provided looks like a Figma file or a project URL.
     */
    static canParse(source: string): Promise<boolean>;
    constructor(token?: string);
    /**
     * Exports assets from Figma.
     */
    export({ source, assets, code }: ExtractorInput, projectRoot: string, reporters?: import("@diez/extractors-core").Reporters): Promise<[void[] | undefined, void]>;
}
export = FigmaExtractor;
//# sourceMappingURL=figma.d.ts.map