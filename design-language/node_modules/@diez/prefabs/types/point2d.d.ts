/**
 * Point data.
 */
export interface Point2DData {
    /**
     * The x value of the point.
     */
    x: number;
    /**
     * The y value of the point.
     */
    y: number;
}
declare const Point2D_base: new (overrides?: Partial<Point2DData> | undefined) => import("@diez/engine").Prefab<Point2DData> & Point2DData;
/**
 * Provides a two dimensional point.
 *
 * Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the
 * context of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics
 * space, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.
 *
 * Usage: `point = Point2D.make(0.5, 0.5);`.
 *
 * @noinheritdoc
 */
export declare class Point2D extends Point2D_base {
    defaults: {
        x: number;
        y: number;
    };
    /**
     * Creates a two dimensional point.
     */
    static make(x: number, y: number): Point2D;
}
export {};
//# sourceMappingURL=point2d.d.ts.map