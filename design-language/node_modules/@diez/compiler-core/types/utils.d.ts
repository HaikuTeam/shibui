/// <reference path="../src/typescript-extensions.d.ts" />
import { Target } from '@diez/engine';
import { Node, Project } from 'ts-morph';
import { AcceptableType, AssemblerFactory, CompilerProvider, ComponentModule, Constructor, DiezType, PropertyDescription, TargetOutput } from './api';
/**
 * A type guard for identifying a [[Constructor]] vs. a plain object.
 * @ignore
 */
export declare const isConstructible: (maybeConstructible: any) => maybeConstructible is Constructor;
/**
 * Gets the project root for the current process. The default project root is the current working directory
 * of the process. This can be overridden using `projectRoot` in `.diezrc`.
 */
export declare const getProjectRoot: () => Promise<string>;
/**
 * Shared cache for retrieving Projects.
 *
 * Exported for testing purposes only.
 * @internal
 * @ignore
 */
export declare const projectCache: Map<string, Project>;
/**
 * Retrieves a Project from a project root.
 * @ignore
 */
export declare const getProject: (projectRoot: string) => Project;
/**
 * Retrieves the set of available targets for the compiler.
 */
export declare const getTargets: () => Promise<Map<Target, CompilerProvider>>;
/**
 * Retrieves a binding for a given target and component source.
 *
 * @typeparam T - The [[TargetBinding]] we are attempting to load.
 */
export declare const getBinding: <T>(target: string, source: string, componentName: DiezType) => Promise<T | undefined>;
/**
 * Retrieves an [[AssemblerFactory]] for the specific [[Target]].
 */
export declare const getAssemblerFactory: <T extends TargetOutput<{}, {}>>(target: Target) => Promise<AssemblerFactory<T>>;
/**
 * Prints all warnings encountered while processing a target component.
 * @ignore
 */
export declare const printWarnings: (targetComponents: Map<DiezType, import("./api").DiezComponent>) => void;
/**
 * Gets a hot port in the range 8080-8180 for hot serving Diez projects.
 * @ignore
 */
export declare const getHotPort: () => Promise<number>;
/**
 * Loads and returns a component module asynchronously.
 *
 * @param projectRoot - The root of the project providing a component module.
 * @ignore
 */
export declare const loadComponentModule: (projectRoot: string) => Promise<ComponentModule>;
/**
 * Purges the require cache for a path. Used during hot module reloading to ensure pristine parses.
 * @ignore
 */
export declare const purgeRequireCache: (path: string, prefix?: string | undefined) => void;
/**
 * Infers package name from the project root.
 * @internal
 * @ignore
 */
export declare const inferProjectName: (projectName: string) => string;
/**
 * A typeguard for determining if a type value has an acceptable type for transpilation purposes.
 */
export declare const isAcceptableType: (typeValue?: Node<import("typescript").Node> | undefined) => typeValue is AcceptableType;
/**
 * Retrives the description for an acceptable type.
 */
export declare const getDescriptionForValue: (typeValue: Node<import("typescript").Node>) => PropertyDescription;
//# sourceMappingURL=utils.d.ts.map