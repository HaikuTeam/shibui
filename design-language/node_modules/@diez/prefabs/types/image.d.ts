import { Target } from '@diez/engine';
import { File } from './file';
import { Size2D } from './size2d';
/**
 * Responsive image data.
 */
export interface ImageData {
    file: File;
    file2x: File;
    file3x: File;
    file4x: File;
    size: Size2D;
}
declare const Image_base: new (overrides?: Partial<ImageData> | undefined) => import("@diez/engine").Prefab<ImageData> & ImageData;
/**
 * Provides an abstraction for raster images. With bindings, this component can embed images in multiple platforms in
 * accordance with best practices. Images should provide pixel ratios for standard, @2x, @3x, and @4x with conventional
 * file naming. The availability of retina resolutions is expected to be a compile-time concern, and the "src" of the
 * image is expected to exist and provide an image with the specified dimensions.
 *
 * @noinheritdoc
 */
export declare class Image extends Image_base {
    /**
     * Yields a raster image according to the convention that files should be located in the same directory using the
     * same filename prefix. For example:
     *
     * ```
     * assets/
     * ├── filename.png
     * ├── filename@2x.png
     * └── filename@3x.png
     * └── filename@4x.png
     * ```
     *
     * can be specified with:
     *
     * `image = Image.responsive('assets/filename.png', 640, 480);`
     */
    static responsive(src: string, width?: number, height?: number): Image;
    defaults: {
        file: File;
        file2x: File;
        file3x: File;
        file4x: File;
        size: Size2D;
    };
    options: {
        file4x: {
            targets: Target[];
        };
    };
}
export {};
//# sourceMappingURL=image.d.ts.map