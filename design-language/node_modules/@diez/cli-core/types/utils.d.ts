/// <reference types="node" />
import { ExecOptions } from 'child_process';
/**
 * The development dependencies of this package.
 * @ignore
 */
export declare const devDependencies: {
    [key: string]: string;
};
/**
 * The version of this package. Used for synchronizing Diez versions.
 * @ignore
 */
export declare const diezVersion: string;
/**
 * A Promise-wrapped `child_process.exec`.
 * @param command - The command to run, with space-separated arguments.
 * @param options - The child_process.exec options.
 */
export declare const execAsync: (command: string, options?: ExecOptions | undefined) => Promise<string>;
/**
 * Returns true iff we are on the macOS platform.
 * @ignore
 */
export declare const isMacOS: () => boolean;
/**
 * Loops through all dependencies to locate Diez plugins, and returns a map of module names to [[DiezConfiguration]]s.
 */
export declare const findPlugins: (rootPackageName?: string, bootstrapRoot?: string | undefined) => Promise<Map<string, Partial<import("./api").FullDiezConfiguration>>>;
/**
 * Wrapped require to support CLI plugin infrastructure.
 * @ignore
 */
export declare const cliRequire: <T>(plugin: string, path: string) => T;
/**
 * Provides an async check for whether we can run a command from the command line.
 *
 * Resolves `true` iff the command both runs and produces output.
 */
export declare const canRunCommand: (command: string) => Promise<boolean>;
/**
 * Locate a binary on macOS.
 */
export declare const locateBinaryMacOS: (bundleId: string) => Promise<string | undefined>;
/**
 * Exit trap for shutting down handles and preventing process leaks in Node.
 */
export declare const exitTrap: (cleanup: () => void) => void;
//# sourceMappingURL=utils.d.ts.map