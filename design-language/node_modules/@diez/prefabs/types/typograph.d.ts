import { Target } from '@diez/engine';
import { Color } from './color';
import { File } from './file';
/**
 * Valid face forms for `@font-face` declarations in web.
 */
export declare const enum FontStyle {
    Normal = "normal",
    Italic = "italic"
}
/**
 * Font data.
 */
export interface FontData {
    /**
     * The font file containing the font's definition. Due to target limitations, the file _must_ be a TrueType file
     * with a `.ttf` extension or an OpenType file with an `.otf` extension.
     */
    file: File;
    /**
     * The exact, correct PostScript name of the font.
     */
    name: string;
    /**
     * An array of fallback fonts (web only).
     */
    fallbacks: string[];
    /**
     * The weight or boldness of the font (web only).
     */
    weight: number;
    /**
     * The font style (web only).
     */
    style: FontStyle;
}
declare const Font_base: new (overrides?: Partial<FontData> | undefined) => import("@diez/engine").Prefab<FontData> & FontData;
/**
 * A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
 * @noinheritdoc
 */
export declare class Font extends Font_base {
    defaults: {
        file: File;
        name: string;
        fallbacks: string[];
        weight: number;
        style: FontStyle;
    };
    options: {
        fallbacks: {
            targets: Target[];
        };
        weight: {
            targets: Target[];
        };
        style: {
            targets: Target[];
        };
    };
    /**
     * Creates a Font component from a source file and its PostScript name.
     *
     * @param src - The relative path of the font file.
     * @param postscriptName - The correct PostScript name of the font contained by the font file. If blank, it is assumed
     *   the correct name is assumed to be the base name of the file minus its extension.
     */
    static fromFile(src: string, postscriptName?: string): Font;
}
/**
 * An enumeration of the supported iOS `UIFont.TextStyle`s.
 */
export declare const enum IOSTextStyle {
    Body = "body",
    Callout = "callout",
    Caption1 = "caption1",
    Caption2 = "caption2",
    Footnote = "footnote",
    Headline = "headline",
    Subheadline = "subheadline",
    LargeTitle = "largeTitle",
    Title1 = "title1",
    Title2 = "title2",
    Title3 = "title3"
}
/**
 * An enumeration of text alignment types.
 */
export declare const enum TextAlignment {
    /**
     * Aligns according to the system's default for the current language.
     */
    Natural = "natural",
    Left = "left",
    Right = "right",
    Center = "center"
}
/**
 * An enumerated list of text decorations.
 */
export declare const enum TextDecoration {
    Underline = "underline",
    Strikethrough = "strikethrough"
}
/**
 * Typograph data.
 */
export interface TypographData {
    /**
     * The `Font` of the `Typograph`.
     */
    font: Font;
    /**
     * Negative values will be sanatized to `0`.
     */
    fontSize: number;
    /**
     * The `Color` of the `Typograph`.
     */
    color: Color;
    /**
     * The iOS `UIFont.TextStyle` of the `Typograph` (iOS only).
     */
    iosTextStyle: IOSTextStyle;
    /**
     * Indicates whether the `Typograph` should scale with the system's accessibility settings (iOS and Android only).
     */
    shouldScale: boolean;
    /**
     * The desired line height in density independent pixels.
     *
     * A value of `-1` will be treated as if the value is not set.
     *
     * Negative values (other than `-1`) will be sanatized to `0`.
     *
     * This value will be scaled according to `shouldScale`.
     *
     * TODO: Use optionality on `lineHeight` instead when it is supported by the compiler.
     */
    lineHeight: number;
    /**
     * The amount to increase/decrease the spacing between letters in density independent pixels.
     *
     * This value will be scaled according to `shouldScale`.
     */
    letterSpacing: number;
    /**
     * The alignment of the text.
     */
    alignment: TextAlignment;
    /**
     * A list of `TextDecoration`s to apply to the `Typograph`.
     */
    decoration: TextDecoration[];
}
declare const Typograph_base: new (overrides?: Partial<TypographData> | undefined) => import("@diez/engine").Prefab<TypographData> & TypographData;
/**
 * Describes a typograph including specification of a font name (understood to specify both a font face and a font
 * weight) as well as a font size in device-local units and a font color.
 *
 * @noinheritdoc
 */
export declare class Typograph extends Typograph_base {
    defaults: {
        font: Font;
        fontSize: number;
        color: Color;
        iosTextStyle: IOSTextStyle;
        shouldScale: boolean;
        lineHeight: number;
        letterSpacing: number;
        alignment: TextAlignment;
        decoration: never[];
    };
    options: {
        iosTextStyle: {
            targets: Target[];
        };
        shouldScale: {
            targets: Target[];
        };
    };
    sanitize(data: TypographData): TypographData;
}
/**
 * As a convenience, this enumeration provides the names of all the core fonts supported on iOS.
 */
export declare const IOSFonts: {
    AcademyEngravedLetPlain: Font;
    AlNile: Font;
    AlNileBold: Font;
    AmericanTypewriter: Font;
    AmericanTypewriterBold: Font;
    AmericanTypewriterCondensed: Font;
    AmericanTypewriterCondensedBold: Font;
    AmericanTypewriterCondensedLight: Font;
    AmericanTypewriterLight: Font;
    AmericanTypewriterSemibold: Font;
    AppleColorEmoji: Font;
    AppleSDGothicNeoBold: Font;
    AppleSDGothicNeoLight: Font;
    AppleSDGothicNeoMedium: Font;
    AppleSDGothicNeoRegular: Font;
    AppleSDGothicNeoSemiBold: Font;
    AppleSDGothicNeoThin: Font;
    AppleSDGothicNeoUltraLight: Font;
    ArialBoldItalicMT: Font;
    ArialBoldMT: Font;
    ArialHebrew: Font;
    ArialHebrewBold: Font;
    ArialHebrewLight: Font;
    ArialItalicMT: Font;
    ArialMT: Font;
    ArialRoundedMTBold: Font;
    AvenirBlack: Font;
    AvenirBlackOblique: Font;
    AvenirBook: Font;
    AvenirBookOblique: Font;
    AvenirHeavy: Font;
    AvenirHeavyOblique: Font;
    AvenirLight: Font;
    AvenirLightOblique: Font;
    AvenirMedium: Font;
    AvenirMediumOblique: Font;
    AvenirNextBold: Font;
    AvenirNextBoldItalic: Font;
    AvenirNextCondensedBold: Font;
    AvenirNextCondensedBoldItalic: Font;
    AvenirNextCondensedDemiBold: Font;
    AvenirNextCondensedDemiBoldItalic: Font;
    AvenirNextCondensedHeavy: Font;
    AvenirNextCondensedHeavyItalic: Font;
    AvenirNextCondensedItalic: Font;
    AvenirNextCondensedMedium: Font;
    AvenirNextCondensedMediumItalic: Font;
    AvenirNextCondensedRegular: Font;
    AvenirNextCondensedUltraLight: Font;
    AvenirNextCondensedUltraLightItalic: Font;
    AvenirNextDemiBold: Font;
    AvenirNextDemiBoldItalic: Font;
    AvenirNextHeavy: Font;
    AvenirNextHeavyItalic: Font;
    AvenirNextItalic: Font;
    AvenirNextMedium: Font;
    AvenirNextMediumItalic: Font;
    AvenirNextRegular: Font;
    AvenirNextUltraLight: Font;
    AvenirNextUltraLightItalic: Font;
    AvenirOblique: Font;
    AvenirRoman: Font;
    Baskerville: Font;
    BaskervilleBold: Font;
    BaskervilleBoldItalic: Font;
    BaskervilleItalic: Font;
    BaskervilleSemiBold: Font;
    BaskervilleSemiBoldItalic: Font;
    BodoniOrnamentsITCTT: Font;
    BodoniSvtyTwoITCTTBold: Font;
    BodoniSvtyTwoITCTTBook: Font;
    BodoniSvtyTwoITCTTBookIta: Font;
    BodoniSvtyTwoOSITCTTBold: Font;
    BodoniSvtyTwoOSITCTTBook: Font;
    BodoniSvtyTwoOSITCTTBookIt: Font;
    BodoniSvtyTwoSCITCTTBook: Font;
    BradleyHandITCTTBold: Font;
    ChalkboardSEBold: Font;
    ChalkboardSELight: Font;
    ChalkboardSERegular: Font;
    Chalkduster: Font;
    CharterBlack: Font;
    CharterBlackItalic: Font;
    CharterBold: Font;
    CharterBoldItalic: Font;
    CharterItalic: Font;
    CharterRoman: Font;
    Cochin: Font;
    CochinBold: Font;
    CochinBoldItalic: Font;
    CochinItalic: Font;
    Copperplate: Font;
    CopperplateBold: Font;
    CopperplateLight: Font;
    Courier: Font;
    CourierBold: Font;
    CourierBoldOblique: Font;
    CourierNewPSBoldItalicMT: Font;
    CourierNewPSBoldMT: Font;
    CourierNewPSItalicMT: Font;
    CourierNewPSMT: Font;
    CourierOblique: Font;
    Damascus: Font;
    DamascusBold: Font;
    DamascusLight: Font;
    DamascusMedium: Font;
    DamascusSemiBold: Font;
    DevanagariSangamMN: Font;
    DevanagariSangamMNBold: Font;
    Didot: Font;
    DidotBold: Font;
    DidotItalic: Font;
    DINAlternateBold: Font;
    DINCondensedBold: Font;
    DiwanMishafi: Font;
    EuphemiaUCAS: Font;
    EuphemiaUCASBold: Font;
    EuphemiaUCASItalic: Font;
    Farah: Font;
    FuturaBold: Font;
    FuturaCondensedExtraBold: Font;
    FuturaCondensedMedium: Font;
    FuturaMedium: Font;
    FuturaMediumItalic: Font;
    GeezaPro: Font;
    GeezaProBold: Font;
    Georgia: Font;
    GeorgiaBold: Font;
    GeorgiaBoldItalic: Font;
    GeorgiaItalic: Font;
    GillSans: Font;
    GillSansBold: Font;
    GillSansBoldItalic: Font;
    GillSansItalic: Font;
    GillSansLight: Font;
    GillSansLightItalic: Font;
    GillSansSemiBold: Font;
    GillSansSemiBoldItalic: Font;
    GillSansUltraBold: Font;
    GujaratiSangamMN: Font;
    GujaratiSangamMNBold: Font;
    GurmukhiMN: Font;
    GurmukhiMNBold: Font;
    Helvetica: Font;
    HelveticaBold: Font;
    HelveticaBoldOblique: Font;
    HelveticaLight: Font;
    HelveticaLightOblique: Font;
    HelveticaNeue: Font;
    HelveticaNeueBold: Font;
    HelveticaNeueBoldItalic: Font;
    HelveticaNeueCondensedBlack: Font;
    HelveticaNeueCondensedBold: Font;
    HelveticaNeueItalic: Font;
    HelveticaNeueLight: Font;
    HelveticaNeueLightItalic: Font;
    HelveticaNeueMedium: Font;
    HelveticaNeueMediumItalic: Font;
    HelveticaNeueThin: Font;
    HelveticaNeueThinItalic: Font;
    HelveticaNeueUltraLight: Font;
    HelveticaNeueUltraLightItalic: Font;
    HelveticaOblique: Font;
    HiraginoSansW3: Font;
    HiraginoSansW6: Font;
    HiraMaruProNW4: Font;
    HiraMinProNW3: Font;
    HiraMinProNW6: Font;
    HoeflerTextBlack: Font;
    HoeflerTextBlackItalic: Font;
    HoeflerTextItalic: Font;
    HoeflerTextRegular: Font;
    Kailasa: Font;
    KailasaBold: Font;
    KannadaSangamMN: Font;
    KannadaSangamMNBold: Font;
    KefaRegular: Font;
    KhmerSangamMN: Font;
    KohinoorBanglaLight: Font;
    KohinoorBanglaRegular: Font;
    KohinoorBanglaSemibold: Font;
    KohinoorDevanagariLight: Font;
    KohinoorDevanagariRegular: Font;
    KohinoorDevanagariSemibold: Font;
    KohinoorTeluguLight: Font;
    KohinoorTeluguMedium: Font;
    KohinoorTeluguRegular: Font;
    LaoSangamMN: Font;
    MalayalamSangamMN: Font;
    MalayalamSangamMNBold: Font;
    MarkerFeltThin: Font;
    MarkerFeltWide: Font;
    MenloBold: Font;
    MenloBoldItalic: Font;
    MenloItalic: Font;
    MenloRegular: Font;
    MyanmarSangamMN: Font;
    MyanmarSangamMNBold: Font;
    NoteworthyBold: Font;
    NoteworthyLight: Font;
    NotoNastaliqUrdu: Font;
    NotoSansChakmaRegular: Font;
    OptimaBold: Font;
    OptimaBoldItalic: Font;
    OptimaExtraBlack: Font;
    OptimaItalic: Font;
    OptimaRegular: Font;
    OriyaSangamMN: Font;
    OriyaSangamMNBold: Font;
    PalatinoBold: Font;
    PalatinoBoldItalic: Font;
    PalatinoItalic: Font;
    PalatinoRoman: Font;
    Papyrus: Font;
    PapyrusCondensed: Font;
    PartyLetPlain: Font;
    PingFangHKLight: Font;
    PingFangHKMedium: Font;
    PingFangHKRegular: Font;
    PingFangHKSemibold: Font;
    PingFangHKThin: Font;
    PingFangHKUltralight: Font;
    PingFangSCLight: Font;
    PingFangSCMedium: Font;
    PingFangSCRegular: Font;
    PingFangSCSemibold: Font;
    PingFangSCThin: Font;
    PingFangSCUltralight: Font;
    PingFangTCLight: Font;
    PingFangTCMedium: Font;
    PingFangTCRegular: Font;
    PingFangTCSemibold: Font;
    PingFangTCThin: Font;
    PingFangTCUltralight: Font;
    RockwellBold: Font;
    RockwellBoldItalic: Font;
    RockwellItalic: Font;
    RockwellRegular: Font;
    SavoyeLetPlain: Font;
    SinhalaSangamMN: Font;
    SinhalaSangamMNBold: Font;
    SnellRoundhand: Font;
    SnellRoundhandBlack: Font;
    SnellRoundhandBold: Font;
    Symbol: Font;
    TamilSangamMN: Font;
    TamilSangamMNBold: Font;
    Thonburi: Font;
    ThonburiBold: Font;
    ThonburiLight: Font;
    TimesNewRomanPSBoldItalicMT: Font;
    TimesNewRomanPSBoldMT: Font;
    TimesNewRomanPSItalicMT: Font;
    TimesNewRomanPSMT: Font;
    TrebuchetBoldItalic: Font;
    TrebuchetMS: Font;
    TrebuchetMSBold: Font;
    TrebuchetMSItalic: Font;
    Verdana: Font;
    VerdanaBold: Font;
    VerdanaBoldItalic: Font;
    VerdanaItalic: Font;
    ZapfDingbatsITC: Font;
    Zapfino: Font;
};
/**
 * As a convenience, this enumeration provides the names of all the core fonts supported on Android.
 */
export declare const AndroidFonts: {
    CarroisGothicSCRegular: Font;
    ComingSoon: Font;
    CutiveMono: Font;
    DancingScriptBold: Font;
    DancingScriptRegular: Font;
    DroidSansMono: Font;
    NotoSerifBold: Font;
    NotoSerifBoldItalic: Font;
    NotoSerifItalic: Font;
    NotoSerifRegular: Font;
    RobotoBlack: Font;
    RobotoBlackItalic: Font;
    RobotoBold: Font;
    RobotoBoldItalic: Font;
    RobotoCondensedBold: Font;
    RobotoCondensedBoldItalic: Font;
    RobotoCondensedItalic: Font;
    RobotoCondensedLight: Font;
    RobotoCondensedLightItalic: Font;
    RobotoCondensedMedium: Font;
    RobotoCondensedMediumItalic: Font;
    RobotoCondensedRegular: Font;
    RobotoItalic: Font;
    RobotoLight: Font;
    RobotoLightItalic: Font;
    RobotoMedium: Font;
    RobotoMediumItalic: Font;
    RobotoRegular: Font;
    RobotoThin: Font;
    RobotoThinItalic: Font;
};
export {};
//# sourceMappingURL=typograph.d.ts.map