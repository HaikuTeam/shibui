import { Compiler, CompilerTargetHandler, DiezType, Property, TargetDiezComponent, TargetProperty } from '@diez/compiler-core';
import { AndroidBinding, AndroidDependency, AndroidOutput } from './android.api';
/**
 * A compiler for Android targets.
 * @noinheritdoc
 * @ignore
 */
export declare class AndroidCompiler extends Compiler<AndroidOutput, AndroidBinding> {
    /**
     * @abstract
     */
    protected validateOptions(): Promise<void>;
    /**
     * @abstract
     */
    hostname(): Promise<string>;
    /**
     * @abstract
     */
    readonly moduleName: string;
    /**
     * @abstract
     */
    readonly hotComponent: string;
    /**
     * Retrieves an initializer based on a spec.
     *
     * Via recursion, produces output like `ComponentType(fieldName: "fileValue", child: ChildType())`.
     *
     * @abstract
     */
    protected collectComponentProperties(parent: Property, allProperties: (TargetProperty | undefined)[]): TargetProperty | undefined;
    /**
     * @abstract
     */
    protected getInitializer(targetComponent: TargetDiezComponent): string;
    /**
     * @abstract
     */
    protected getPrimitiveName(type: DiezType): string | undefined;
    /**
     * @abstract
     */
    protected getPrimitiveInitializer(type: DiezType, instance: any): string | undefined;
    /**
     * @abstract
     */
    protected createOutput(sdkRoot: string, projectName: string): {
        sdkRoot: string;
        projectName: string;
        packageName: string;
        packageRoot: string;
        components: Map<any, any>;
        processedComponents: Map<any, any>;
        sources: Set<never>;
        dependencies: Set<AndroidDependency>;
        assetBindings: Map<any, any>;
        resources: Map<any, any>;
    };
    /**
     * @abstract
     */
    readonly staticRoot: string;
    /**
     * @abstract
     */
    printUsageInstructions(): void;
    /**
     * @abstract
     */
    clear(): void;
    /**
     * Overrides asset writeout so we can write out raw resources compatible with Android naming requirements.
     */
    writeAssets(): void;
    /**
     * @abstract
     */
    writeSdk(): Promise<void>;
}
/**
 * Handles Android target compilation.
 * @ignore
 */
export declare const androidHandler: CompilerTargetHandler;
//# sourceMappingURL=android.compiler.d.ts.map