// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

module.exports = {};

if (typeof process === 'undefined' || !process) {
  process = {env: {}};
} else if (!process.env) {
  Object.defineProperty(process, 'env', {
    value: {},
  });
}

const Environment = {
  serverUrl: process.env.DIEZ_SERVER_URL || '/diez',
  isHot: process.env.DIEZ_IS_HOT,
};

const diezHTMLExtensions = [];

class Diez {
  constructor (componentType) {
    this.iframe = document.createElement('iframe');
    this.componentType = componentType;
    this.component = new this.componentType();
    this.subscribers = [];
  }

  static applyHTMLExtensions () {
    diezHTMLExtensions.forEach((extension) => {
      if (extension instanceof Function) {
        extension();
      }
    });
  }

  broadcast () {
    for (const subscriber of this.subscribers) {
      subscriber(this.component);
    }
  }

  subscribe (subscriber) {
    this.subscribers.push(subscriber);
  }

  attach (subscriber) {
    subscriber(this.component);
    if (!Environment.isHot) {
      return;
    }
    this.subscribe(subscriber);
    if (this.iframe.contentWindow) {
      return;
    }
    this.iframe.src = `${Environment.serverUrl}/components/${this.component.constructor.name}`;
    this.iframe.width = '0';
    this.iframe.height = '0';
    this.iframe.style.display = 'none';
    document.body.appendChild(this.iframe);
    window.addEventListener('message', (event) => {
      if (event.source === this.iframe.contentWindow && event.origin.startsWith(Environment.serverUrl)) {
        this.component = new this.componentType(JSON.parse(event.data));
        this.broadcast();
      }
    });
  }
}

module.exports.Diez = Diez;

/**
A component encapsulating color, including alpha transparency.

You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and
[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.
*/
class Color {
  constructor({
    h,
    s,
    l,
    a
  }) {
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.h = h;
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.s = s;
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.l = l;
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.a = a;
  }
}


module.exports.Color = Color;

const {colorToCss} = require('@diez/web-sdk-common');

Object.defineProperties(Color.prototype, {
  color: {
    get () {
      return colorToCss(this);
    },
  },
  colorStyle: {
    get () {
      return {
        color: this.color,
      };
    },
  },
  backgroundColorStyle: {
    get () {
      return {
        backgroundColor: this.color,
      };
    },
  },
  borderColorStyle: {
    get () {
      return {
        borderColor: this.color,
      };
    },
  },
  outlineColorStyle: {
    get () {
      return {
        outlineColor: this.color,
      };
    },
  },
});

class Palette {
  constructor({
    fuss10 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.8564705882352941, a: 1},
    fuss20 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.786470588235294, a: 1},
    fuss30 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.7164705882352941, a: 1},
    fuss40 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.6464705882352941, a: 1},
    fuss50 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.5764705882352941, a: 1},
    fuss60 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.506470588235294, a: 1},
    fuss70 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.43647058823529405, a: 1},
    fuss80 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.36647058823529405, a: 1},
    fuss90 = {h: 0.8254385964912281, s: 0.8796296296296295, l: 0.29647058823529404, a: 1},
    tiger10 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.8976470588235295, a: 1},
    tiger20 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.8276470588235294, a: 1},
    tiger30 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.7576470588235295, a: 1},
    tiger40 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.6876470588235295, a: 1},
    tiger50 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.6176470588235294, a: 1},
    tiger60 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.5476470588235294, a: 1},
    tiger70 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.4776470588235294, a: 1},
    tiger80 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.4076470588235294, a: 1},
    tiger90 = {h: 0.018962075848303384, s: 0.8564102564102564, l: 0.3376470588235294, a: 1},
    marigold10 = {h: 0.09680134680134682, s: 1, l: 0.891764705882353, a: 1},
    marigold20 = {h: 0.09680134680134682, s: 1, l: 0.821764705882353, a: 1},
    marigold30 = {h: 0.09680134680134682, s: 1, l: 0.751764705882353, a: 1},
    marigold40 = {h: 0.09680134680134682, s: 1, l: 0.681764705882353, a: 1},
    marigold50 = {h: 0.09680134680134682, s: 1, l: 0.611764705882353, a: 1},
    marigold60 = {h: 0.09680134680134682, s: 1, l: 0.5417647058823529, a: 1},
    marigold70 = {h: 0.09680134680134682, s: 1, l: 0.471764705882353, a: 1},
    marigold80 = {h: 0.09680134680134682, s: 1, l: 0.40176470588235297, a: 1},
    marigold90 = {h: 0.09680134680134682, s: 1, l: 0.33176470588235296, a: 1},
    clover10 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.7819607843137255, a: 1},
    clover20 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.7119607843137254, a: 1},
    clover30 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.6419607843137255, a: 1},
    clover40 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.5719607843137255, a: 1},
    clover50 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.5019607843137255, a: 1},
    clover60 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.4319607843137255, a: 1},
    clover70 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.36196078431372547, a: 1},
    clover80 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.29196078431372546, a: 1},
    clover90 = {h: 0.21260683760683763, s: 0.6141732283464567, l: 0.22196078431372546, a: 1},
    cyan10 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.6858823529411765, a: 1},
    cyan20 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.6158823529411765, a: 1},
    cyan30 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.5458823529411765, a: 1},
    cyan40 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.4758823529411765, a: 1},
    cyan50 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.40588235294117647, a: 1},
    cyan60 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.33588235294117647, a: 1},
    cyan70 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.26588235294117646, a: 1},
    cyan80 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.19588235294117645, a: 1},
    cyan90 = {h: 0.5175879396984925, s: 0.9613526570048307, l: 0.12588235294117645, a: 1},
    amethyst10 = {h: 0.7364532019704434, s: 1, l: 0.8819607843137255, a: 1},
    amethyst20 = {h: 0.7364532019704434, s: 1, l: 0.8119607843137255, a: 1},
    amethyst30 = {h: 0.7364532019704434, s: 1, l: 0.7419607843137255, a: 1},
    amethyst40 = {h: 0.7364532019704434, s: 1, l: 0.6719607843137254, a: 1},
    amethyst50 = {h: 0.7364532019704434, s: 1, l: 0.6019607843137255, a: 1},
    amethyst60 = {h: 0.7364532019704434, s: 1, l: 0.5319607843137255, a: 1},
    amethyst70 = {h: 0.7364532019704434, s: 1, l: 0.46196078431372545, a: 1},
    amethyst80 = {h: 0.7364532019704434, s: 1, l: 0.39196078431372544, a: 1},
    amethyst90 = {h: 0.7364532019704434, s: 1, l: 0.32196078431372543, a: 1},
    seattle10 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.07803921568627459, a: 1},
    seattle20 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.008039215686274526, a: 1},
    seattle30 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.9380392156862746, a: 1},
    seattle40 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.8680392156862746, a: 1},
    seattle50 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.7980392156862746, a: 1},
    seattle60 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.7280392156862745, a: 1},
    seattle70 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.6580392156862745, a: 1},
    seattle80 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.5880392156862746, a: 1},
    seattle90 = {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.5180392156862745, a: 1},
    ivory = {h: 0.5833333333333345, s: 0.25000000000000266, l: 0.9843137254901961, a: 1},
    midnight = {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 1},
    graphite = {h: 0.6014492753623188, s: 0.2527472527472528, l: 0.1784313725490196, a: 1}
  } = {}) {
    this.fuss10 = new Color(fuss10);
    this.fuss20 = new Color(fuss20);
    this.fuss30 = new Color(fuss30);
    this.fuss40 = new Color(fuss40);
    this.fuss50 = new Color(fuss50);
    this.fuss60 = new Color(fuss60);
    this.fuss70 = new Color(fuss70);
    this.fuss80 = new Color(fuss80);
    this.fuss90 = new Color(fuss90);
    this.tiger10 = new Color(tiger10);
    this.tiger20 = new Color(tiger20);
    this.tiger30 = new Color(tiger30);
    this.tiger40 = new Color(tiger40);
    this.tiger50 = new Color(tiger50);
    this.tiger60 = new Color(tiger60);
    this.tiger70 = new Color(tiger70);
    this.tiger80 = new Color(tiger80);
    this.tiger90 = new Color(tiger90);
    this.marigold10 = new Color(marigold10);
    this.marigold20 = new Color(marigold20);
    this.marigold30 = new Color(marigold30);
    this.marigold40 = new Color(marigold40);
    this.marigold50 = new Color(marigold50);
    this.marigold60 = new Color(marigold60);
    this.marigold70 = new Color(marigold70);
    this.marigold80 = new Color(marigold80);
    this.marigold90 = new Color(marigold90);
    this.clover10 = new Color(clover10);
    this.clover20 = new Color(clover20);
    this.clover30 = new Color(clover30);
    this.clover40 = new Color(clover40);
    this.clover50 = new Color(clover50);
    this.clover60 = new Color(clover60);
    this.clover70 = new Color(clover70);
    this.clover80 = new Color(clover80);
    this.clover90 = new Color(clover90);
    this.cyan10 = new Color(cyan10);
    this.cyan20 = new Color(cyan20);
    this.cyan30 = new Color(cyan30);
    this.cyan40 = new Color(cyan40);
    this.cyan50 = new Color(cyan50);
    this.cyan60 = new Color(cyan60);
    this.cyan70 = new Color(cyan70);
    this.cyan80 = new Color(cyan80);
    this.cyan90 = new Color(cyan90);
    this.amethyst10 = new Color(amethyst10);
    this.amethyst20 = new Color(amethyst20);
    this.amethyst30 = new Color(amethyst30);
    this.amethyst40 = new Color(amethyst40);
    this.amethyst50 = new Color(amethyst50);
    this.amethyst60 = new Color(amethyst60);
    this.amethyst70 = new Color(amethyst70);
    this.amethyst80 = new Color(amethyst80);
    this.amethyst90 = new Color(amethyst90);
    this.seattle10 = new Color(seattle10);
    this.seattle20 = new Color(seattle20);
    this.seattle30 = new Color(seattle30);
    this.seattle40 = new Color(seattle40);
    this.seattle50 = new Color(seattle50);
    this.seattle60 = new Color(seattle60);
    this.seattle70 = new Color(seattle70);
    this.seattle80 = new Color(seattle80);
    this.seattle90 = new Color(seattle90);
    this.ivory = new Color(ivory);
    this.midnight = new Color(midnight);
    this.graphite = new Color(graphite);
  }
}


module.exports.Palette = Palette;

/**
Semantically mapped colors
*/
class PaletteMapped {
  constructor({
    contentBackground = {h: 0.5833333333333345, s: 0.25000000000000266, l: 0.9843137254901961, a: 1},
    text = {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 1}
  } = {}) {
    this.contentBackground = new Color(contentBackground);
    this.text = new Color(text);
  }
}


module.exports.PaletteMapped = PaletteMapped;

class Colors {
  constructor({
    palette = {},
    paletteMapped = {}
  } = {}) {
    this.palette = new Palette(palette);
    this.paletteMapped = new PaletteMapped(paletteMapped);
  }
}


module.exports.Colors = Colors;

/**
Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,
and more. This component is used internally by [[Image]] and [[Font]].

The compiler may enforce certain restrictions on the `type` of a `File` instance.

Usage: `file = new File({src: 'assets/images/file.jpg', type: FileType.Image});`.
*/
class File {
  constructor({
    src,
    type
  }) {
  /**
  File data.
  */
    this.src = src;
  /**
  File data.
  */
    this.type = type;
  }
}


module.exports.File = File;

Object.defineProperties(File.prototype, {
  url: {
    get () {
      return `${Environment.serverUrl}/${this.src}`;
    },
  },
});

/**
Provides a two dimensional size.

Usage: `size = Size2D.make(1920, 1080);`.
*/
class Size2D {
  constructor({
    width,
    height
  }) {
  /**
  Size data.
  */
    this.width = width;
  /**
  Size data.
  */
    this.height = height;
  }
}


module.exports.Size2D = Size2D;

Object.defineProperties(Size2D.prototype, {
  style: {
    get () {
      return {
        width: `${this.width}px`,
        height: `${this.height}px`,
      };
    },
  },
  backgroundSizeStyle: {
    get () {
      return {
        backgroundSize: `${this.style.width} ${this.style.height}`,
      };
    },
  },
});

/**
Provides an abstraction for raster images. With bindings, this component can embed images in multiple platforms in
accordance with best practices. Images should provide pixel ratios for standard, @2x, @3x, and @4x with conventional
file naming. The availability of retina resolutions is expected to be a compile-time concern, and the "src" of the
image is expected to exist and provide an image with the specified dimensions.
*/
class Image {
  constructor({
    file,
    file2x,
    file3x,
    size
  }) {
    /**
    Responsive image data.
    **/
    this.file = new File(file);
    /**
    Responsive image data.
    **/
    this.file2x = new File(file2x);
    /**
    Responsive image data.
    **/
    this.file3x = new File(file3x);
    /**
    Responsive image data.
    **/
    this.size = new Size2D(size);
  }
}


module.exports.Image = Image;

Object.defineProperties(Image.prototype, {
  url: {
    get () {
      switch (Math.ceil(window.devicePixelRatio)) {
        case 1:
          return this.file.url;
        case 2:
          return this.file2x.url;
        case 3:
          return this.file3x.url;
        default:
          return this.file2x.url;
      }
    },
  },
  backgroundImageStyle: {
    get () {
      return {
        backgroundImage: `url("${this.url}")`,
      };
    },
  },
});

/**
In addition to colors and typography, you can also collect other types of
design language primitives in components as well — such as images, icons &
animations.
*/
class Images {
  constructor({
    logo = {file: {src: "assets/logo.png", type: "image"}, file2x: {src: "assets/logo@2x.png", type: "image"}, file3x: {src: "assets/logo@3x.png", type: "image"}, size: {width: 52, height: 48}},
    masthead = {file: {src: "assets/masthead.png", type: "image"}, file2x: {src: "assets/masthead@2x.png", type: "image"}, file3x: {src: "assets/masthead@3x.png", type: "image"}, size: {width: 208, height: 88}}
  } = {}) {
    this.logo = new Image(logo);
    this.masthead = new Image(masthead);
  }
}


module.exports.Images = Images;

/**
Provides an abstraction for [Lottie](https://airbnb.io/lottie/#/) animations.
*/
class Lottie {
  constructor({
    file,
    loop,
    autoplay
  }) {
    /**
    Lottie data.
    **/
    this.file = new File(file);
  /**
  Lottie data.
  */
    this.loop = loop;
  /**
  Lottie data.
  */
    this.autoplay = autoplay;
  }
}


module.exports.Lottie = Lottie;

const lottie = require('lottie-web');

Object.defineProperties(Lottie.prototype, {
  url: {
    get () {
      return this.file.url;
    },
  },
});

Lottie.prototype.mount = function (ref) {
  lottie.loadAnimation({
    container: ref,
    path: this.url,
    autoplay: this.autoplay,
    loop: this.loop,
  });
};

diezHTMLExtensions.push(() => {
  HTMLElement.prototype.mountLottie = function (lottieComponent) {
    lottieComponent.mount(this);
  };
});

/**
Copywriting we reuse across properties
*/
class En {
  constructor({
    title = "Haiku for Teams",
    tagline = "Software is more than code.",
    caption = "Whether you design, code, or manage — Haiku's tools for teams help you create, together."
  } = {}) {
    this.title = title;
    this.tagline = tagline;
    this.caption = caption;
  }
}


module.exports.En = En;

class Es {
  constructor({
    title = "Haiku para Equipos",
    tagline = "Software es más que código.",
    caption = "Ya sea que diseñe, codifique o administre, las herramientas de Haiku para equipos lo ayudan a crear juntos."
  } = {}) {
    this.title = title;
    this.tagline = tagline;
    this.caption = caption;
  }
}


module.exports.Es = Es;

class Copywriting {
  constructor({
    en = {},
    es = {}
  } = {}) {
    this.en = new En(en);
    this.es = new Es(es);
  }
}


module.exports.Copywriting = Copywriting;

/**
Here we create a custom reusable component for describing layout margins.
*/
class Margin {
  constructor({
    top,
    bottom,
    left,
    right
  }) {
  /**
  Defining the interface of your component's data enables you to instantiate your own
reusable components.
  */
    this.top = top;
  /**
  Defining the interface of your component's data enables you to instantiate your own
reusable components.
  */
    this.bottom = bottom;
  /**
  Defining the interface of your component's data enables you to instantiate your own
reusable components.
  */
    this.left = left;
  /**
  Defining the interface of your component's data enables you to instantiate your own
reusable components.
  */
    this.right = right;
  }
}


module.exports.Margin = Margin;

/**
You can even collect your own custom components.
*/
class LayoutValues {
  constructor({
    spacingSmall = 5,
    spacingMedium = 25,
    spacingLarge = 40,
    contentMargin = {top: 40, bottom: 10, left: 10, right: 10}
  } = {}) {
    this.spacingSmall = spacingSmall;
    this.spacingMedium = spacingMedium;
    this.spacingLarge = spacingLarge;
    this.contentMargin = new Margin(contentMargin);
  }
}


module.exports.LayoutValues = LayoutValues;

/**
Provides a two dimensional point.

Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the
context of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics
space, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.

Usage: `point = Point2D.make(0.5, 0.5);`.
*/
class Point2D {
  constructor({
    x,
    y
  }) {
  /**
  Point data.
  */
    this.x = x;
  /**
  Point data.
  */
    this.y = y;
  }
}


module.exports.Point2D = Point2D;

/**
Provides a drop shadow.
*/
class DropShadow {
  constructor({
    offset,
    radius,
    color
  }) {
    /**
    DropShadow data.
    **/
    this.offset = new Point2D(offset);
  /**
  DropShadow data.
  */
    this.radius = radius;
    /**
    DropShadow data.
    **/
    this.color = new Color(color);
  }
}


module.exports.DropShadow = DropShadow;

const {dropShadowToCss, dropShadowToFilterCss} = require('@diez/web-sdk-common');

Object.defineProperties(DropShadow.prototype, {
  boxShadow: {
    get () {
      return dropShadowToCss(this);
    },
  },
  textShadow: {
    get () {
      return dropShadowToCss(this);
    },
  },
  filter: {
    get () {
      return dropShadowToFilterCss(this);
    },
  },
  boxShadowStyle: {
    get () {
      return {
        boxShadow: this.boxShadow,
      };
    },
  },
  textShadowStyle: {
    get () {
      return {
        textShadow: this.textShadow,
      };
    },
  },
  filterStyle: {
    get () {
      return {
        filter: this.filter,
      };
    },
  },
});

class Shadows {
  constructor({
    button = {offset: {x: 0, y: 1}, radius: 8, color: {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.7980392156862746, a: 0.65}},
    card = {offset: {x: 0, y: 0}, radius: 15, color: {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.7980392156862746, a: 0.5}},
    cardOnDark = {offset: {x: 0, y: 0}, radius: 15, color: {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 0.5}},
    cardHovered = {offset: {x: 0, y: 0}, radius: 40, color: {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.7980392156862746, a: 0.5800000000000001}},
    cardHoveredOnDark = {offset: {x: 0, y: 0}, radius: 40, color: {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 0.5800000000000001}},
    modal = {offset: {x: 0, y: 0}, radius: 40, color: {h: 0.5952380952380955, s: 0.06796116504854371, l: 0.7980392156862746, a: 0.5800000000000001}},
    modalOnDark = {offset: {x: 0, y: 0}, radius: 40, color: {h: 0.6014492753623188, s: 0.2527472527472528, l: 0.1784313725490196, a: 0.78}}
  } = {}) {
    this.button = new DropShadow(button);
    this.card = new DropShadow(card);
    this.cardOnDark = new DropShadow(cardOnDark);
    this.cardHovered = new DropShadow(cardHovered);
    this.cardHoveredOnDark = new DropShadow(cardHoveredOnDark);
    this.modal = new DropShadow(modal);
    this.modalOnDark = new DropShadow(modalOnDark);
  }
}


module.exports.Shadows = Shadows;

/**
A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
*/
class Font {
  constructor({
    file,
    name,
    fallbacks,
    weight,
    style
  }) {
    /**
    Font data.
    **/
    this.file = new File(file);
  /**
  Font data.
  */
    this.name = name;
  /**
  Font data.
  */
    this.fallbacks = fallbacks;
  /**
  Font data.
  */
    this.weight = weight;
  /**
  Font data.
  */
    this.style = style;
  }
}


module.exports.Font = Font;

/**
Describes a typograph including specification of a font name (understood to specify both a font face and a font
weight) as well as a font size in device-local units and a font color.
*/
class Typograph {
  constructor({
    font,
    fontSize,
    color,
    lineHeight,
    letterSpacing,
    alignment,
    decoration
  }) {
    /**
    Typograph data.
    **/
    this.font = new Font(font);
  /**
  Typograph data.
  */
    this.fontSize = fontSize;
    /**
    Typograph data.
    **/
    this.color = new Color(color);
  /**
  Typograph data.
  */
    this.lineHeight = lineHeight;
  /**
  Typograph data.
  */
    this.letterSpacing = letterSpacing;
  /**
  Typograph data.
  */
    this.alignment = alignment;
  /**
  Typograph data.
  */
    this.decoration = decoration;
  }
}


module.exports.Typograph = Typograph;

const {fontToCss, FontFormats, textAlignmentToCss, textDecorationsToCss} = require('@diez/web-sdk-common');

let styleSheet;
let cache;

const registerFont = (font) => {
  if (!styleSheet || !cache) {
    const styleEl = document.createElement('style');
    document.head.appendChild(styleEl);
    styleSheet = styleEl.sheet;
    cache = new Set();
  }

  if (cache.has(font.file.src)) {
    return;
  }

  const format = font.file.src.split('.').pop();
  const rule = `
@font-face {
  font-family: '${font.name}';
  font-weight: ${font.weight};
  font-style: ${font.style};
  src: local('${font.name}'), url(${font.file.url}) format('${FontFormats[format] || format}');
}`;
  styleSheet.insertRule(rule);
  cache.add(font.file.src);
};

Object.defineProperties(Typograph.prototype, {
  fontFamily: {
    get () {
      registerFont(this.font);
      return fontToCss(this.font);
    },
  },
  style: {
    get () {
      const style = {
        fontFamily: this.fontFamily,
        fontWeight: this.font.fontWeight,
        fontStyle: this.font.fontStyle,
        fontSize: `${this.fontSize}px`,
        color: this.color.color,
        letterSpacing: `${this.letterSpacing}px`,
        textAlign: textAlignmentToCss(this.alignment),
        textDecoration: textDecorationsToCss(this.decoration),
      };
      if (this.lineHeight !== -1) {
        style.lineHeight = `${this.lineHeight}px`;
      }
      return style;
    },
  },
});

Typograph.prototype.applyStyle = function (ref) {
  const style = this.style;
  ref.style.fontFamily = style.fontFamily;
  ref.style.fontWeight = style.fontWeight;
  ref.style.fontStyle = style.fontStyle;
  ref.style.fontSize = style.fontSize;
  ref.style.color = style.color;
  ref.style.lineHeight = style.lineHeight;
  ref.style.letterSpacing = style.letterSpacing;
  ref.style.textAlign = style.textAlign;
};

diezHTMLExtensions.push(() => {
  HTMLElement.prototype.applyTypograph = (typograph) => {
    typograph.applyStyle(this);
  };
});

/**
Typographs encapsulate type styles with support for a specific font, font size,
and color. More typograph properties are coming soon.
*/
class Typography {
  constructor({
    heading1 = {font: {file: {src: "assets/SourceSansPro-Regular.ttf", type: "font"}, name: "SourceSansPro-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 24, color: {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    body = {font: {file: {src: "assets/SourceSansPro-Regular.ttf", type: "font"}, name: "SourceSansPro-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 18, color: {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "center", decoration: []},
    caption = {font: {file: {src: "assets/SourceSansPro-Regular.ttf", type: "font"}, name: "SourceSansPro-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 14, color: {h: 0.5980392156862745, s: 0.5483870967741935, l: 0.060784313725490195, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []}
  } = {}) {
    this.heading1 = new Typograph(heading1);
    this.body = new Typograph(body);
    this.caption = new Typograph(caption);
  }
}


module.exports.Typography = Typography;

class DesignLanguage {
  constructor({
    colors = {},
    images = {},
    loadingAnimation = {file: {src: "assets/loadingAnimation.json", type: "raw"}, loop: false, autoplay: true},
    localization = {},
    layoutValues = {},
    shadows = {},
    typography = {}
  } = {}) {
    this.colors = new Colors(colors);
    this.images = new Images(images);
    this.loadingAnimation = new Lottie(loadingAnimation);
    this.localization = new Copywriting(localization);
    this.layoutValues = new LayoutValues(layoutValues);
    this.shadows = new Shadows(shadows);
    this.typography = new Typography(typography);
  }
}

Object.defineProperty(DesignLanguage, 'name', {value: 'DesignLanguage'});

module.exports.DesignLanguage = DesignLanguage;

