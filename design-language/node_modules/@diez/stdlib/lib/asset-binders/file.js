"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const t=require("@diez/prefabs"),o=e(require("fontkit")),n=require("fs-extra"),r=require("path"),s=(e,t,o)=>{if(e.host&&e.host instanceof o&&e.type!==t)throw new Error(`${e.host.constructor.name} file ${e.src} does not specify file type ${t}.`)};exports.fileAssetBinder=(async(e,{projectRoot:i},{assetBindings:f})=>new Promise((a,c)=>{if(s(e,"image",t.Image),"font"===e.type){if(!e.src)return a();((e,n)=>{s(e,"font",t.Font);const i=r.extname(e.src);if(".ttf"!==i&&".otf"!==i)throw new Error(`Invalid font file type: ${i}. Only .ttf and .otf are supported.`);const f=e.host;if(!(f&&f instanceof t.Font))return;if(!f.name)throw new Error(`The font file at ${e.src} has no associated name.`);const a=o.default.openSync(r.join(n,e.src));if((e=>null!==e&&"TrueTypeCollection"===e.constructor.name)(a))throw new Error(`Font file ${e.src} is a font collection, not a single font.`);if(!a||a.postscriptName!==f.name)throw new Error(`Font file ${e.src} does not include a font named ${f.name}.`)})(e,i)}const l=r.join(i,e.src);n.stat(l,(t,o)=>{if(t||!o.isFile())return c(new Error(`File at ${l} does not exist.`));f.set(e.src,{contents:l,copy:!0}),a()})}));
//# sourceMappingURL=/@diez/stdlib/lib/asset-binders/file.js.map