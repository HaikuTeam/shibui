"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const t=require("@diez/cli-core"),o=require("@diez/compiler-core"),i=require("@diez/storage"),r=require("change-case"),n=require("fs-extra"),s=require("handlebars"),a=require("internal-ip"),c=e(require("jsdoc-to-markdown")),p=require("path"),d=require("../utils"),u=p.join(d.sourcesPath,"ios"),l=(e,t)=>{for(const o of e){if(o.cocoapods.name===t.cocoapods.name)return;if(o.carthage.name===t.carthage.name)return}e.add(t)},m=e=>`${e}\n\nYou can install XcodeGen using HomeBrew:\n\n  brew install xcodegen\n\nSee https://github.com/yonaskolb/XcodeGen#installing for all installation options.`;class h extends o.Compiler{async validateOptions(){if(this.parser.hot)return;if(!await t.canRunCommand("xcodegen --help")){if(this.parser.options.carthage)throw new Error(m("--carthage requires XcodeGen in order to generate an Xcode project."));if(!this.parser.options.cocoapods)throw new Error(m("--target=ios without --cocoapods requires XcodeGen in order to generate an Xcode project."))}}async hostname(){try{return`${await t.execAsync("scutil --get LocalHostName")}.local`}catch(e){return await a.v4()}}get moduleName(){return r.pascalCase(`diez-${this.output.projectName}`)}get hotComponent(){return require.resolve("@diez/targets/lib/targets/ios.component")}collectComponentProperties(e,t){const o=t.filter(e=>void 0!==e),i=o[0];if(!i){const t=e.isComponent?e.type:this.getPrimitiveName(e.type);if(!t)return;return{...e,type:`[${t}]`,initializer:"[]"}}return{...i,type:`[${i.type}]`,initializer:`[${o.map(e=>e.initializer).join(", ")}]`}}getInitializer(e){const t=[];for(const o of e.properties)t.push(`${o.name}: ${o.initializer}`);return`${e.type}(${t.join(", ")})`}getPrimitiveName(e){switch(e){case o.PrimitiveType.String:return"String";case o.PrimitiveType.Float:case o.PrimitiveType.Number:return"CGFloat";case o.PrimitiveType.Int:return"Int";case o.PrimitiveType.Boolean:return"Bool";default:return}}getPrimitiveInitializer(e,t){switch(e){case o.PrimitiveType.String:return`"${t}"`;case o.PrimitiveType.Float:case o.PrimitiveType.Number:case o.PrimitiveType.Int:case o.PrimitiveType.Boolean:return t.toString();default:return}}async mergeBindingToOutput(e,t){for(const o of e.sources){const e=p.join(this.output.sourcesRoot,"Bindings",p.basename(o));await t.copyFile(o,e)}if(e.dependencies)for(const t of e.dependencies)l(this.output.dependencies,t)}createOutput(e,t){const o=r.pascalCase(t);return{sdkRoot:e,projectName:t,processedComponents:new Map,sources:new Set([]),dependencies:new Set,assetBindings:new Map,bundleIdPrefix:`org.diez.${o}`,sourcesRoot:p.join(e,"Sources",`Diez${o}`)}}get staticRoot(){return p.join(this.output.sdkRoot,"Sources","Static")}printUsageInstructions(){t.Log.info(`Diez SDK installed locally at ${this.output.sdkRoot}.\n`),this.parser.options.cocoapods&&(t.Log.info(`You can depend on the Diez SDK in your ${t.Format.code("Podfile")} during development like so:`),t.Log.code(`pod '${this.moduleName}', :path => '${this.output.sdkRoot}'\n`),t.Log.info(`Don't forget to run ${t.Format.code("pod install")} after updating your CocoaPods dependencies!\n`)),this.parser.options.carthage&&(t.Log.info("You can depend on the Diez SDK in your application by hosting the generated SDK on GitHub and updating "),t.Log.info(`your ${t.Format.code("Cartfile")} like so:`),t.Log.code(`github "organization/${this.moduleName}" "master"\n`),t.Log.info(`where ${t.Format.code(`organization/${this.moduleName}`)} is your generated SDK's GitHub repository.`),t.Log.info(`Don't forget to run ${t.Format.code("carthage update")} after updating your Cartfile!\n`)),t.Log.info(`You can use ${t.Format.code("Diez")} to bootstrap any of the components defined in your project.\n`),t.Log.info("For example:"),t.Log.code(`import UIKit\nimport ${this.moduleName}\n\nclass ViewController: UIViewController {\n    private lazy var diez = Diez<${Array.from(this.parser.rootComponentNames)[0]}>(view: view)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        diez.attach { [weak self] component in\n            // ...\n        }\n    }\n}\n  `)}clear(){this.output.sources.clear(),this.output.processedComponents.clear(),this.output.dependencies.clear(),this.output.assetBindings.clear()}get blacklist(){const e=new Set;return this.parser.options.cocoapods||e.add("Diez.podspec"),this.parser.options.carthage||(e.add("Cartfile"),this.parser.options.cocoapods&&e.add("project.yml")),e}async writeSdk(){const e=(await o.getAssemblerFactory("ios"))(this.output);await e.addCoreFiles();const r=this.output.assetBindings.size>0,a=p.join(this.output.sourcesRoot,"Components"),d=n.readFileSync(p.join(u,"ios.component.handlebars")).toString();for(const[t,{binding:o,...i}]of this.output.processedComponents){i.description.body&&(i.description.body=await c.default.render({source:`/** ${i.description.body} */`}));for(const e of Object.values(i.properties))e.originalType&&this.parser.getComponentForTypeOrThrow(e.originalType).isFixedComponent&&(e.initializer=`${e.type}()`);const r=p.join(a,`${i.type.toString()}.swift`);await e.writeFile(r,s.compile(d)({...i,fixed:i.isRootComponent||this.parser.getComponentForTypeOrThrow(t).isFixedComponent,hasProperties:Object.keys(i.properties).length>0})),o&&await this.mergeBindingToOutput(o,e)}const l=this.output.dependencies.size>0||r,m=Array.from(this.output.assetBindings.keys()),h=new Set,g=new Set;for(const e of m){const t=e.split("/")[0],o=p.join("Sources","Static",t);t.endsWith(".xcassets")?h.add(o):g.add(o)}const f={hasDependenciesOrStaticAssets:l,hasStaticAssets:r,sdkVersion:this.parser.options.sdkVersion,moduleName:this.moduleName,assetCatalogPaths:Array.from(h),assetFolderPaths:Array.from(g),bundleIdPrefix:this.output.bundleIdPrefix,dependencies:Array.from(this.output.dependencies)};this.writeAssets(),await i.outputTemplatePackage(p.join(u,"sdk"),this.output.sdkRoot,f,this.blacklist),this.parser.options.cocoapods&&!this.parser.options.carthage||await t.execAsync("xcodegen generate",{cwd:this.output.sdkRoot})}}exports.IosCompiler=h,exports.iosHandler=(async e=>{if(!t.isMacOS())throw new Error("--target ios can only be built on macOS.");return new h(e).start()});
//# sourceMappingURL=/@diez/targets/lib/targets/ios.compiler.js.map