import { CompilerOptions, TargetProperty } from '@diez/compiler-core';
/**
 * The root of all native sources provided by this package.
 * @ignore
 */
export declare const sourcesPath: string;
/**
 * A command validator helper which bans targets other than the
 */
export declare const onlyTarget: (option: "target" | "sdkVersion" | "cocoapods" | "carthage", options: CompilerOptions, target: string) => void;
/**
 * Casts to `string` and joins all arguments in kebab-case.
 * @ignore
 */
export declare const joinToKebabCase: (...args: any[]) => string;
/**
 * A handlebars helper for mapping serialized array structures to a constructor assignment.
 *
 * For example, given a component property like `fonts: Fonts[][]`, we want to create output like:
 *
 * `this.fonts = fonts.map((value1) => value1.map((value2) => new Font(value2)));`
 * @ignore
 */
export declare const webComponentListHelper: (property: TargetProperty) => string;
/**
 * Generates an array of united style sheet variables from the provided unitless variable.
 *
 * The returned array does not include a variable definition for the unitless value.
 */
export declare const getUnitedStyleSheetVariables: (name: string, value: string) => {
    name: string;
    value: string;
}[];
//# sourceMappingURL=utils.d.ts.map