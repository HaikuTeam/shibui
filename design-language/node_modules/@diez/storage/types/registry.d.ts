import { DiezRegistryOptions } from './api';
/**
 * A registry implementation with private details and async static accessors for reading/writing configuration values.
 */
export declare class Registry {
    private configuration;
    private static instance?;
    private flush;
    private get;
    private set;
    private delete;
    private static initialize;
    /**
     * Gets a configuration value by key.
     * @param key The Configuration key requested.
     */
    static get<T extends keyof DiezRegistryOptions>(key: T): Promise<Partial<DiezRegistryOptions>[T] | undefined>;
    /**
     * Sets a configuration value by key.
     * @param key The Configuration key to set.
     * @param value The Configuration key-value.
     */
    static set(values: Partial<DiezRegistryOptions>): Promise<void>;
    /**
     * Deletes a configuration value by key.
     * @param key The Configuration key to delete.
     */
    static delete(key: keyof DiezRegistryOptions): Promise<void>;
    /**
     * Resets the in-memory registry.
     */
    static reset(): void;
}
//# sourceMappingURL=registry.d.ts.map