import { Compiler, CompilerTargetHandler, DiezType, Property, TargetDiezComponent, TargetProperty } from '@diez/compiler-core';
import { RuleList, WebBinding, WebDependency, WebOutput } from './web.api';
/**
 * A compiler for web targets.
 * @ignore
 */
export declare class WebCompiler extends Compiler<WebOutput, WebBinding> {
    /**
     * @abstract
     */
    protected validateOptions(): Promise<void>;
    /**
     * @abstract
     */
    hostname(): Promise<string>;
    /**
     * @abstract
     */
    readonly moduleName: string;
    /**
     * @abstract
     */
    readonly hotComponent: string;
    /**
     * @abstract
     */
    protected collectComponentProperties(parent: Property, allProperties: (TargetProperty | undefined)[]): TargetProperty | undefined;
    /**
     * @abstract
     */
    protected getInitializer(targetComponent: TargetDiezComponent): string;
    /**
     * @abstract
     */
    protected getPrimitiveName(type: DiezType): string | undefined;
    /**
     * @abstract
     */
    protected getPrimitiveInitializer(type: DiezType, instance: any): string | undefined;
    /**
     * Updates the output based on the contents of the binding.
     */
    private mergeBindingToOutput;
    /**
     * @abstract
     */
    protected createOutput(sdkRoot: string, projectName: string): {
        sdkRoot: string;
        projectName: string;
        processedComponents: Map<any, any>;
        sources: Set<string>;
        declarations: Set<string>;
        declarationImports: Set<string>;
        dependencies: Set<WebDependency>;
        assetBindings: Map<any, any>;
        styleSheet: {
            variables: Map<any, any>;
            font: RuleList;
            styles: RuleList;
        };
    };
    /**
     * @abstract
     */
    readonly staticRoot: string;
    /**
     * @abstract
     */
    printUsageInstructions(): void;
    /**
     * @abstract
     */
    clear(): void;
    private getStyleTokens;
    private writeStyleSdk;
    writeAssets(): void;
    /**
     * Generates a source file comprised of all sources concatenated together.
     */
    private generateSource;
    /**
     * Generates a declaration file comprised of all declarations concatenated together.
     */
    private generateDeclaration;
    writeSdk(): Promise<[any, any, void]>;
}
/**
 * Handles web target compilation.
 * @ignore
 */
export declare const webHandler: CompilerTargetHandler;
//# sourceMappingURL=web.compiler.d.ts.map