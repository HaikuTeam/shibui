import { PropertyOptions, Serializable } from './api';
/**
 * The abstract Prefab class provides a harness for reusable, instantiable design token prefabs.
 *
 * IMPORTANT: never extend this class directly. Due to the type semantics of Prefab instances--which should both store
 * and implement the interface of their generic type parameters--we provide a factory ensuring intuitive typing.
 *
 * See [[prefab]] for details.
 * @typeparam T - The interface the prefab data, as well as the prefab itself, must adhere to.
 */
export declare abstract class Prefab<T extends object> implements Serializable<T> {
    private readonly overrides;
    /**
     * The component that is hosting us.
     */
    host?: Prefab<any>;
    /**
     * Every concrete extension must implement exhaustive defaults conforming to the data interface.
     */
    readonly abstract defaults: Readonly<T>;
    /**
     * If necessary, options may be defined.
     */
    readonly options: Partial<{
        [K in keyof T]: Partial<PropertyOptions>;
    }>;
    constructor(overrides?: Partial<T>);
    /**
     * Proxy method, by which we subtly implement the data interface in the class itself.
     */
    get(instance: any, key: string, receiver: any): any;
    /**
     * A local data sanitizer, which can be used for pinning scalar values and any other data normalization needs.
     */
    protected sanitize(data: T): T;
    /**
     * Serializable<T> interface.
     *
     * Generic serialization instructions. These can be overridden as needed.
     */
    serialize(): any;
}
/**
 * A typing which acknowledges the Proxy by which Prefab<T> actually implements T.
 */
declare type PrefabConstructor<T extends object> = new (overrides?: Partial<T>) => Prefab<T> & T;
/**
 * A factory for prefab base classes. All prefabs should be implemented as concrete classes extending
 * the result of calling `prefab<T>()` for some specific state shape `T`.
 * @typeparam T - The interface the prefab data, as well as the prefab itself, must adhere to.
 */
export declare const prefab: <T extends object>() => PrefabConstructor<T>;
export {};
//# sourceMappingURL=prefab.d.ts.map